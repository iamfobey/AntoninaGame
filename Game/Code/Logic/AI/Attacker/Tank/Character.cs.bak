using Game.Logic.AI.Tank.FSM;
using Game.Logic.Components;
using Game.Logic.Interactive;
using Game.Utils;

using Godot;

namespace Game.Logic.AI.Tank
{
    public partial class Character : Core.AI.Character
    {
        #region GAME METHODS
        [GameMethod]
        public override void _ReadyGame()
        {
            base._ReadyGame();

            HealthComponent.MaxHealth = MaxHealth;
            HealthComponent.HealthRegenerationRate = HealthRegenerationRate;
            HealthComponent.CanRegenerateHealth = CanRegenerateHealth;
            HealthComponent.CanReceiveDamage = CanReceiveDamage;
            HealthComponent.CanReceiveHeal = CanReceiveHeal;
            StaminaComponent.MaxStamina = MaxStamina;
            StaminaComponent.StaminaRegenerationRate = StaminaRegenerationRate;
            StaminaComponent.StaminaRegenerationRateMultiplayer = StaminaRegenerationRateMultiplayer;
            StaminaComponent.CanRegenerateStamina = CanRegenerateStamina;
            AttackedComponent.IsAttacked = IsAttacked;
            PoisonedComponent.IsPoisoned = IsPoisoned;

            HealthComponent.ApplyHeal(this, MaxHealth);
            StaminaComponent.RegenerateStamina(this, MaxStamina);

            HealthBar.Value = HealthComponent.CurrentHealth;

            FSM.RequestState<WalkState>();
        }

        [GameMethod]
        public override void _PhysicsProcessGame(double delta)
        {
            base._PhysicsProcessGame(delta);

            if (CanMoveAndSlide)
            {
                MoveComponent.Direction = GlobalPosition.DirectionTo(NavigationAgent.GetNextPathPosition());
                MoveAndCollide(MoveComponent.Velocity * (float)delta);
            }
        }
        #endregion

        #region SIGNAL METHODS
        [SignalMethod]
        public async void _OnHealthComponentApplyDamage(Node from, float value)
        {
            HealthBar.Value = HealthComponent.CurrentHealth;

            if (from is Player.Character)
            {
                if (CanStunOnDamage && !PoisonedComponent.IsPoisoned)
                {
                    AttackedComponent.Apply(AnimatedSprite);

                    FSM.RequestState<IdleState>();
                    DamageEffectComponent.EmitDamgaeHit(WaitTimeWhenGotStun);
                    await ToSignal(GetTree().CreateTimer(WaitTimeWhenGotStun), SceneTreeTimer.SignalName.Timeout);
                    FSM.RequestState<RunState>();
                }

                if (CanRemovePoisonOnHits && PoisonedComponent.IsPoisoned && HealthComponent.DamageHitCount % HitCountToPoison == 0)
                {
                    PoisonedComponent.Undo(AnimatedSprite);
                    AttackedComponent.Undo(AnimatedSprite);

                    FSM.RequestState<IdleState>();
                    DamageEffectComponent.EmitDamgaeHit(WaitTimeWhenChangeToNormal);
                    await ToSignal(GetTree().CreateTimer(WaitTimeWhenChangeToNormal), SceneTreeTimer.SignalName.Timeout);
                    FSM.RequestState<RunState>();

                    NavigationAgent.TargetPosition =
                        NavigationRegion.GetRandomPointRadius(GlobalPosition, 500.0f, 2000.0f);
                }
            }
        }

        [SignalMethod]
        public void _OnHealthComponentApplyHeal(Node from, float value)
        {
            HealthBar.Value = HealthComponent.CurrentHealth;
        }

        [SignalMethod]
        public async void _OnDirtEntered(Dirt dirt, bool inner)
        {
            if (CanChangeSelfToPoisoned && dirt.Type == Dirt.EType.Poison && inner)
            {
                PoisonedComponent.Apply(AnimatedSprite);

                FSM.RequestState<IdleState>();
                await ToSignal(GetTree().CreateTimer(WaitTimeWhenGotPoisoned), SceneTreeTimer.SignalName.Timeout);
                FSM.RequestState<AttackState>();
            }
        }
        #endregion

        #region PUBLIC FIELDS
        public int CurrentAttackToPlayerCount = 0;
        public int CurrentChangePositionCount = 0;
        #endregion

        #region EDITOR FIELDS
        [ExportGroup("Base")]
        [Export]
        public ProgressBar HealthBar;
        [Export]
        public NavigationRegion2D NavigationRegion;

        [ExportGroup("Components")]
        [Export]
        public AttackedComponent AttackedComponent;
        [Export]
        public PoisonedComponent PoisonedComponent;

        [ExportCategory("Parameters")]
        [ExportGroup("Character Logic")]
        [Export]
        public float WaitTimeWhenGotStun = 2.0f;
        [Export]
        public float WaitTimeWhenChangeToNormal = 2.0f;
        [Export]
        public float WaitTimeWhenGotPoisoned = 2.0f;
        [Export]
        public int HitCountToPoison = 3;
        [Export]
        public int MaxAttackToPlayerCount = 3;
        [Export]
        public int MaxChangePositionCount = 1;
        [Export]
        public bool CanStunOnDamage = true;
        [Export]
        public bool CanRemovePoisonOnHits = true;
        [Export]
        public bool CanChangeSelfToPoisoned = true;
        [ExportGroup("FSM")]
        [ExportSubgroup("AttackState")]
        [Export]
        public float AttackDamageValue = 5.0f;
        [Export]
        public float AttackWalkSpeed = 850.0f;
        [Export]
        public int MaxAttackCount = 3;
        [Export]
        public int MaxIdleCount = 1;
        [ExportSubgroup("AvoidWalkHitState")]
        [Export]
        public float AvoidWalkHitSpeed = 1300.0f;
        [ExportSubgroup("AvoidWalkState")]
        [Export]
        public float AvoidWalkSpeed = 500.0f;
        [ExportSubgroup("IdleState")]
        [Export]
        public Vector2 AvoidIdleToWalkRadius = new(500.0f, 1000.0f);
        [ExportSubgroup("IdleState")]
        [Export]
        public Vector2 AvoidWalkToHitRadius = new(1000.0f, 1500.0f);
        [ExportSubgroup("RunState")]
        [Export]
        public float RunSpeed = 550.0f;
        [ExportSubgroup("WalkState")]
        [Export]
        public float WalkSpeed = 200.0f;
        [ExportGroup("Components")]
        [ExportSubgroup("HealthComponent")]
        [Export]
        public float MaxHealth = 100.0f;
        [Export]
        public float HealthRegenerationRate = 5.0f;
        [Export]
        public bool CanRegenerateHealth = false;
        [Export]
        public bool CanReceiveDamage = true;
        [Export]
        public bool CanReceiveHeal = true;
        [ExportSubgroup("StaminaComponent")]
        [Export]
        public float MaxStamina = 100.0f;
        [Export]
        public float StaminaRegenerationRate = 10.0f;
        [Export]
        public float StaminaRegenerationRateMultiplayer = 1.005f;
        [Export]
        public bool CanRegenerateStamina = false;
        [ExportSubgroup("AttackComponent")]
        [Export]
        public bool IsAttacked = false;
        [ExportSubgroup("PoisonedComponent")]
        [Export]
        public bool IsPoisoned = false;
        #endregion
    }
}